import re
import cffi
import importlib

# It must have been exactly like in programdata
lookuptables = [
    [
        471,
        471,
        385,
        342,
        315,
        295,
        280,
        268,
        258,
        249,
        242,
        235,
        229,
        224,
        219,
        215,
        211,
        207,
        204,
        200,
        197,
        194,
        192,
        189,
        187,
        184,
        182,
        180,
        178,
        176,
        174,
        173,
        171,
        169,
        168,
        166,
        165,
        163,
        162,
        161,
        159,
        158,
        157,
        156,
        155,
        153,
        152,
        151,
        150,
        149,
        148,
        147,
        146,
        145,
        145,
        144,
        143,
        142,
        141,
        140,
        140,
        139,
        138,
        137,
        137,
        136,
        135,
        134,
        134,
        133,
        132,
        132,
        131,
        130,
        130,
        129,
        129,
        128,
        127,
        127,
        126,
        126,
        125,
        125,
        124,
        124,
        123,
        122,
        122,
        121,
        121,
        120,
        120,
        120,
        119,
        119,
        118,
        118,
        117,
        117,
        116,
        116,
        115,
        115,
        115,
        114,
        114,
        113,
        113,
        113,
        112,
        112,
        111,
        111,
        111,
        110,
        110,
        109,
        109,
        109,
        108,
        108,
        108,
        107,
        107,
        107,
        106,
        106,
        106,
        105,
        105,
        105,
        104,
        104,
        104,
        103,
        103,
        103,
        102,
        102,
        102,
        102,
        101,
        101,
        101,
        100,
        100,
        100,
        99,
        99,
        99,
        99,
        98,
        98,
        98,
        97,
        97,
        97,
        97,
        96,
        96,
        96,
        96,
        95,
        95,
        95,
        95,
        94,
        94,
        94,
        94,
        93,
        93,
        93,
        93,
        92,
        92,
        92,
        92,
        91,
        91,
        91,
        91,
        90,
        90,
        90,
        90,
        90,
        89,
        89,
        89,
        89,
        88,
        88,
        88,
        88,
        88,
        87,
        87,
        87,
        87,
        87,
        86,
        86,
        86,
        86,
        86,
        85,
        85,
        85,
        85,
        85,
        84,
        84,
        84,
        84,
        84,
        83,
        83,
        83,
        83,
        83,
        82,
        82,
        82,
        82,
        82,
        81,
        81,
        81,
        81,
        81,
        81,
        80,
        80,
        80,
        80,
        80,
        79,
        79,
        79,
        79,
        79,
        79,
        78,
        78,
        78,
        78,
        78,
        78,
        77,
        77,
        77,
        77,
        77,
        77,
        76,
        76,
        76,
        76,
        76,
        76,
        75,
        75,
        75,
        75,
        75,
        75,
        74,
        74,
        74,
        74,
        74,
        74,
        73,
        73,
        73,
        73,
        73,
        73,
        73,
        72,
        72,
        72,
        72,
        72,
        72,
        71,
        71,
        71,
        71,
        71,
        71,
        71,
        70,
        70,
        70,
        70,
        70,
        70,
        70,
        69,
        69,
        69,
        69,
        69,
        69,
        69,
        68,
        68,
        68,
        68,
        68,
        68,
        68,
        67,
        67,
        67,
        67,
        67,
        67,
        67,
        66,
        66,
        66,
        66,
        66,
        66,
        66,
        66,
        65,
        65,
        65,
        65,
        65,
        65,
        65,
        64,
        64,
        64,
        64,
        64,
        64,
        64,
        64,
        63,
        63,
        63,
        63,
        63,
        63,
        63,
        62,
        62,
        62,
        62,
        62,
        62,
        62,
        62,
        61,
        61,
        61,
        61,
        61,
        61,
        61,
        61,
        60,
        60,
        60,
        60,
        60,
        60,
        60,
        60,
        60,
        59,
        59,
        59,
        59,
        59,
        59,
        59,
        59,
        58,
        58,
        58,
        58,
        58,
        58,
        58,
        58,
        57,
        57,
        57,
        57,
        57,
        57,
        57,
        57,
        57,
        56,
        56,
        56,
        56,
        56,
        56,
        56,
        56,
        56,
        55,
        55,
        55,
        55,
        55,
        55,
        55,
        55,
        54,
        54,
        54,
        54,
        54,
        54,
        54,
        54,
        54,
        53,
        53,
        53,
        53,
        53,
        53,
        53,
        53,
        53,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        52,
        51,
        51,
        51,
        51,
        51,
        51,
        51,
        51,
        51,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        49,
        49,
        49,
        49,
        49,
        49,
        49,
        49,
        49,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        48,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        47,
        46,
        46,
        46,
        46,
        46,
        46,
        46,
        46,
        46,
        46,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        44,
        44,
        44,
        44,
        44,
        44,
        44,
        44,
        44,
        44,
        43,
        43,
        43,
        43,
        43,
        43,
        43,
        43,
        43,
        43,
        42,
        42,
        42,
        42,
        42,
        42,
        42,
        42,
        42,
        42,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        41,
        40,
        40,
        40,
        40,
        40,
        40,
        40,
        40,
        40,
        40,
        39,
        39,
        39,
        39,
        39,
        39,
        39,
        39,
        39,
        39,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        38,
        37,
        37,
        37,
        37,
        37,
        37,
        37,
        37,
        37,
        37,
        36,
        36,
        36,
        36,
        36,
        36,
        36,
        36,
        36,
        36,
        35,
        35,
        35,
        35,
        35,
        35,
        35,
        35,
        35,
        35,
        34,
        34,
        34,
        34,
        34,
        34,
        34,
        34,
        34,
        33,
        33,
        33,
        33,
        33,
        33,
        33,
        33,
        33,
        33,
        32,
        32,
        32,
        32,
        32,
        32,
        32,
        32,
        32,
        32,
        31,
        31,
        31,
        31,
        31,
        31,
        31,
        31,
        31,
        31,
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        18,
        18,
        18,
        18,
        18,
        18,
        18,
        18,
        18,
        17,
        17,
        17,
        17,
        17,
        17,
        17,
        17,
        16,
        16,
        16,
        16,
        16,
        16,
        16,
        16,
        16,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        11,
        11,
        11,
        11,
        11,
        11,
        11,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        9,
        9,
        9,
        9,
        9,
        9,
        9,
        8,
        8,
        8,
        8,
        8,
        8,
        8,
        7,
        7,
        7,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -2,
        -2,
        -2,
        -2,
        -2,
        -3,
        -3,
        -3,
        -3,
        -3,
        -4,
        -4,
        -4,
        -4,
        -4,
        -5,
        -5,
        -5,
        -5,
        -5,
        -6,
        -6,
        -6,
        -6,
        -6,
        -7,
        -7,
        -7,
        -7,
        -8,
        -8,
        -8,
        -8,
        -9,
        -9,
        -9,
        -9,
        -9,
        -10,
        -10,
        -10,
        -10,
        -11,
        -11,
        -11,
        -12,
        -12,
        -12,
        -12,
        -13,
        -13,
        -13,
        -13,
        -14,
        -14,
        -14,
        -15,
        -15,
        -15,
        -16,
        -16,
        -16,
        -17,
        -17,
        -17,
        -18,
        -18,
        -18,
        -19,
        -19,
        -19,
        -20,
        -20,
        -21,
        -21,
        -21,
        -22,
        -22,
        -23,
        -23,
        -23,
        -24,
        -24,
        -25,
        -25,
        -26,
        -26,
        -27,
        -28,
        -28,
        -29,
        -29,
        -30,
        -31,
        -31,
        -32,
        -33,
        -33,
        -34,
        -35,
        -36,
        -37,
        -38,
        -39,
        -40,
        -41,
        -42,
        -43,
        -45,
        -47,
        -48,
        -50,
        -53,
        -56,
        -59,
        -64,
        -71,
    ]
]


class ModuleWrapper:
    def __init__(self, module):
        self.module = module
        self.snapshot = {}

    def __enter__(self):
        self.create_snapshot()
        return self.module

    def __exit__(self, exc_type, exc_value, exc_traceback):
        self.load_snapshot()

    def create_snapshot(self):
        for key in self.module.__dict__.keys():
            value = eval(f"self.module.{key}")
            if isinstance(value, cffi.FFI().CData):
                try:
                    size = eval(f"self.module.{key.upper()}_SIZE")
                    # cast cdata to byte array
                    self.snapshot[key] = [value[i] for i in range(size)]
                except AttributeError:
                    print(f"Missing {key.upper()}_SIZE for {key}")
            else:
                self.snapshot[key] = value

    def load_snapshot(self):
        for key, value in self.snapshot.items():
            if isinstance(value, int):
                try:
                    exec(f"self.module.{key}=value")
                except AttributeError:  # Probably const
                    pass
            elif isinstance(value, list):
                for i, data in enumerate(value):
                    exec(f"self.module.{key}[{i}]=data")


def load(filename):
    # import and return resulting module
    ffi = cffi.FFI()
    module = importlib.import_module("bin." + filename)
    with open("test/generatedDefinitions/definitions.h") as definitions_file:
        ffi.cdef(definitions_file.read())
    return module.lib, ffi


def exec_cycle(module):
    module.SYSTEM_exec = True
    module.core()


def max6675_response(module, test_response):
    for i in range(2):
        module.SPDR0 = (test_response & 0xFF00) >> 8  # MSB first
        test_response = test_response << 8
        module.SPI0_STC_vect()
        yield


def read_usart(module):
    response = bytearray()
    while module.USART_TX_message_length:
        response.append(module.UDR2)
        module.USART2_TX_vect()

    return response


def click(module, id):
    write_usart(module, 0x65, [0, id, 1])
    return read_usart(module)


def write_usart(module, header, message):
    usart_eot = int.to_bytes(module.USART_EOT, 1, byteorder="little")
    usart_eot = usart_eot * module.USART_EOT_COUNT
    if header is not None:
        usart_header = header.to_bytes(1, byteorder="little")
        message = usart_header + bytearray(message) + usart_eot
    else:
        message = bytearray(message) + usart_eot
    for byte in message:
        module.UDRRX = byte
        module.USART2_RX_vect()


def parse_nextion(module, stream, nextion_values):
    for message in stream.split(b"\xff\xff\xff"):
        message = message.decode(encoding="ASCII")
        if re.fullmatch("[a-z]+[0-9]*\\.val+=\\s*\\S+", message):
            # variable value e.g var.val=24
            variable = message.split(".")[0]
            value = message.split("=")[1]
            nextion_values["val"][variable] = value
        if re.fullmatch('[a-z]+[0-9]*\\.txt+="\\s*\\S+"', message):
            # String variable value e.g var.txt=24
            variable = message.split(".")[0]
            value = message.split("=")[1]
            nextion_values["txt"][variable] = value[1:-1]
        if re.fullmatch("[a-z]+[0-9]*\\.pic+=\\S+", message):
            # picture id e.g var.pic=24
            variable = message.split(".")[0]
            value = message.split("=")[1]
            nextion_values["pic"][variable] = value


def floattofp(value, fractionalsize):
    weight = 2**fractionalsize
    return int(round(value * weight))


def fptofloat(value, fractionalsize):
    weight = 2**fractionalsize
    return value / weight


def read_nextion_output(m, ffi):
    result = {}
    output = ffi.unpack(m.USART_TX_buffer, m.USART_TX_message_length).split(
        b"\xff\xff\xff"
    )
    print(f"OUTPUT: {output}")
    m.USART_TX_clear()
    for message in output[:-1]:
        variable, value = message.decode().split("=")
        result[variable] = value

    print(f"NEXTION: {result}")
    return result


"""
    Generate signal
    @return pairs of rising and falling edges
"""


def generate_signal(first_interval, second_interval, iterations):
    interval = first_interval + second_interval
    primary_edges = range(0, interval * iterations, interval)
    secondary_edges = range(first_interval, interval * iterations, interval)
    return zip(primary_edges, secondary_edges)
